---

---

<div class="w-108 min-h-svh bg-gray-400">
  <audio id="audio-player" preload="auto">
      <source src="https://stream.xmission.com/kuaa" type="audio/mpeg">
  </audio>

  <button id="nav-play-btn" class="btn btn-danger btn-lg">
      <i id="nav-play-icon" class="bi bi-play-fill"></i> Listen Live
  </button>
  
  <div id="player-container" class="player-container text-center">
    <div id="player-art-bg" class="player-art-bg">
      <img id="player-art-fg" src="https://placehold.co/200/2d3436/dfe6e9?text=KUAA"
      alt="Album Art" class="player-art-fg" crossorigin="anonymous">
    </div>
    <div class="player-info">
      <p id="player-song" class="song-title mb-0">Loading Song...</p>
      <p id="player-artist" class="artist-name mb-1">Loading Artist...</p>
      <p id="player-album" class="album-name mb-3">Loading Album...</p>
      <div class="player-controls d-flex justify-content-center align-items-center">
        <button id="volume-btn" class="mx-3" aria-label="Toggle Mute"><i id="volume-icon" class="bi bi-volume-up-fill"></i></button>
        <button id="play-pause-btn" class="play-btn mx-3" aria-label="Play or Pause"><i id="play-pause-icon" class="bi bi-play-fill"></i></button>
        <button class="mx-3" aria-label="Favorite this song"><i class="bi bi-heart"></i></button>
      </div>
    </div>
  </div>

</div>

<script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
            const colorThief = new ColorThief();

            // --- PLAYER CONTROLS ---
            const audioPlayer = document.getElementById('audio-player');
            const playPauseBtn = document.getElementById('play-pause-btn');
            const playPauseIcon = document.getElementById('play-pause-icon');
            const navPlayBtn = document.getElementById('nav-play-btn');
            const navPlayIcon = document.getElementById('nav-play-icon');
            const volumeBtn = document.getElementById('volume-btn');
            const volumeIcon = document.getElementById('volume-icon');

            function togglePlay() {
                if (audioPlayer.paused) {
                    audioPlayer.play().catch(e => console.error("Play initiation failed:", e));
                } else {
                    audioPlayer.pause();
                }
            }

            function updatePlayIcons() {
                const isPlaying = !audioPlayer.paused;
                playPauseIcon.className = isPlaying ? 'bi bi-pause-fill' : 'bi bi-play-fill';
                navPlayIcon.className = isPlaying ? 'bi bi-pause-fill' : 'bi bi-play-fill';
            }

            function toggleMute() {
                audioPlayer.muted = !audioPlayer.muted;
                volumeIcon.className = audioPlayer.muted ? 'bi bi-volume-mute-fill' : 'bi bi-volume-up-fill';
            }

            playPauseBtn.addEventListener('click', togglePlay);
            navPlayBtn.addEventListener('click', togglePlay);
            volumeBtn.addEventListener('click', toggleMute);
            audioPlayer.addEventListener('play', updatePlayIcons);
            audioPlayer.addEventListener('pause', updatePlayIcons);
            audioPlayer.addEventListener('volumechange', () => {
                volumeIcon.className = audioPlayer.muted || audioPlayer.volume === 0 ? 'bi bi-volume-mute-fill' : 'bi bi-volume-up-fill';
            });

            // --- NOW PLAYING ---
            const nowPlayingApiUrl = `/.netlify/functions/get-now-playing`;
            const playerContainer = document.getElementById('player-container');
            const playerSong = document.getElementById('player-song');
            const playerArtist = document.getElementById('player-artist');
            const playerAlbum = document.getElementById('player-album');
            const playerArtBg = document.getElementById('player-art-bg');
            const playerArtFg = document.getElementById('player-art-fg');

            const fetchNowPlaying = async () => {
                try {
                    const response = await fetch(nowPlayingApiUrl);
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const data = await response.json();

                    if (data.items && data.items.length > 0) {
                        const latestSpin = data.items[0];

                        playerSong.textContent = latestSpin.song || 'Music Variety';
                        playerArtist.textContent = latestSpin.artist || 'Various Artists';
                        playerAlbum.textContent = latestSpin.release || 'KUAA';

                        const imageUrl = latestSpin.image || 'https://placehold.co/200/2d3436/dfe6e9?text=KUAA';
                        if (playerArtFg.src !== imageUrl) {
                            playerArtFg.src = imageUrl;
                            playerArtBg.style.backgroundImage = `url(${imageUrl})`;

                            playerArtFg.addEventListener('load', () => {
                                try {
                                    const dominantColor = colorThief.getColor(playerArtFg);
                                    const rgbColor = `rgb(${dominantColor.join(',')})`;
                                    playerContainer.style.setProperty('--player-bg', rgbColor);
                                } catch (e) {
                                    playerContainer.style.setProperty('--player-bg', '#2d3436');
                                }
                            }, { once: true });
                        }
                    } else {
                        playerContainer.style.setProperty('--player-bg', '#2d3436');
                    }
                } catch (error) {
                    console.error("Error fetching Now Playing data:", error);
                    playerContainer.style.setProperty('--player-bg', '#2d3436');
                }
            };

            // --- RECENT SPINS ---
            const recentSpinsApiUrl = `/.netlify/functions/get-recent-spins`;
            const recentSpinsContainer = document.getElementById('recent-spins-container');

            const fetchRecentSpins = async () => {
                try {
                    const response = await fetch(recentSpinsApiUrl);
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const data = await response.json();

                    if (data.items && data.items.length > 1) {
                        const recent = data.items.slice(1);
                        let recentHtml = '';
                        recent.forEach(spin => {
                            recentHtml += `
                                <div class="list-group-item list-group-item-action d-flex align-items-center recent-spin-item">
                                    <img src="${spin.image || 'https://placehold.co/50x50/A8DADC/1D3557?text=?'}" class="rounded me-3" alt="Album art">
                                    <div class="flex-grow-1">
                                        <div class="fw-bold">${spin.song || 'Untitled'}</div>
                                        <div>${spin.artist || 'Unknown Artist'}</div>
                                    </div>
                                </div>`;
                        });
                        recentSpinsContainer.innerHTML = recentHtml;
                    } else {
                        recentSpinsContainer.innerHTML = '<p class="text-center p-3">No recent songs to display.</p>';
                    }
                } catch (error) {
                    console.error("Error fetching recent spins:", error);
                }
            };

            // --- SCHEDULE ---
            const scheduleApiUrl = `/.netlify/functions/get-schedule`;

            // New function to format time strings like "08:00:00" into "8:00 AM"
            const formatTime = (timeString) => {
                if (!timeString) return '';
                // Create a dummy date to use the browser's formatting capabilities
                const [hours, minutes] = timeString.split(':');
                const date = new Date();
                date.setHours(hours, minutes, 0);
                return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
            };

            const renderSchedule = (showsByDay) => {
                const dayMap = { 0: 'sunday', 1: 'monday', 2: 'tuesday', 3: 'wednesday', 4: 'thursday', 5: 'friday', 6: 'saturday' };
                for (const dayIndex in dayMap) {
                    const dayName = dayMap[dayIndex];
                    const container = document.getElementById(dayName);
                    const dayShows = showsByDay[dayIndex];

                    if (!container) continue;

                    if (!dayShows || dayShows.length === 0) {
                        container.innerHTML = '<p class="text-center p-3">No shows scheduled for today.</p>';
                    } else {
                        let tableHTML = `<table class="table table-striped table-hover">
                            <thead class="table-dark"><tr><th>Time</th><th>Show</th><th>DJ/Host</th></tr></thead><tbody>`;
                        dayShows.forEach(show => {
                            // Calculate end time
                            const [startHours, startMinutes] = show.start_time.split(':');
                            const startDate = new Date();
                            startDate.setHours(startHours, startMinutes, 0, 0);
                            const endDate = new Date(startDate.getTime() + show.duration * 1000);
                            const endTimeString = endDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });

                            tableHTML += `<tr>
                                <td>${formatTime(show.start_time)} - ${endTimeString}</td>
                                <td>${show.title || 'Untitled Show'}</td>
                                <td>${show.persona_name || 'KUAA'}</td>
                            </tr>`;
                        });
                        tableHTML += `</tbody></table>`;
                        container.innerHTML = tableHTML;
                    }
                }
            };

            const fetchSchedule = async () => {
                try {
                    const response = await fetch(scheduleApiUrl);
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const scheduleData = await response.json();
                    const finalSchedule = scheduleData.items;

                    // --- FINAL DIAGNOSTIC ---
                    // This will show us the exact structure of the data from the backend.
                    console.log("--- CLEANED SCHEDULE DATA FROM BACKEND ---");
                    console.log(finalSchedule);
                    // --- END DIAGNOSTIC ---

                    const showsByDay = { 0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [] };

                    finalSchedule.forEach(show => {
                        // This 'if' condition is likely where the logic is failing.
                        // We need to see what the property names actually are.
                        const scheduleDays = show.days;
                        const startTime = show.start_time;

                        if (scheduleDays && Array.isArray(scheduleDays) && startTime) {
                            scheduleDays.forEach(dayIndex => {
                                if (dayIndex >= 0 && dayIndex <= 6) {
                                    showsByDay[dayIndex].push(show);
                                }
                            });
                        }
                    });

                    // Sort each day's shows by their start time
                    for (const day in showsByDay) {
                        showsByDay[day].sort((a, b) => {
                            return a.start_time.localeCompare(b.start_time);
                        });
                    }

                    renderSchedule(showsByDay);

                } catch (error) {
                    console.error("Error fetching schedule:", error);
                }
            };

            // --- INITIALIZE ---
            fetchNowPlaying();
            fetchRecentSpins();
            fetchSchedule();
            setInterval(fetchNowPlaying, 20000);
            setInterval(fetchRecentSpins, 60000);

            // --- Set Today's Tab as Active ---
            const todayIndex = new Date().getDay();
            const dayMap = { 0: 'sunday', 1: 'monday', 2: 'tuesday', 3: 'wednesday', 4: 'thursday', 5: 'friday', 6: 'saturday' };
            const todayTab = document.getElementById(`${dayMap[todayIndex]}-tab`);
            if (todayTab) {
                const tab = new bootstrap.Tab(todayTab);
                tab.show();
            }

            // --- SMOOTH SCROLL ---
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    if (this.getAttribute('data-bs-toggle') === 'tab' || this.id === 'nav-play-btn') return;
                    e.preventDefault();
                    document.querySelector(this.getAttribute('href')).scrollIntoView({ behavior: 'smooth' });
                });
            });
        });
    </script>